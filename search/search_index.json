{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Annikken Andee Documentation Welcome to Annikken Andee documentation. The documentation is structured with Getting Started followed by Annikken Andee Products. We recommend reading through the Getting Started section for your relevant product before proceeding the product documentation.","title":"Home"},{"location":"#annikken-andee-documentation","text":"Welcome to Annikken Andee documentation. The documentation is structured with Getting Started followed by Annikken Andee Products. We recommend reading through the Getting Started section for your relevant product before proceeding the product documentation.","title":"Annikken Andee Documentation"},{"location":"AndeeAPI/","text":"Annikken Andee Library These are all the functions that can be found in the Andee Library Andee functions The Andee Class has general functions that affects the way the Andee Shield works or what it does. Begin class void begin() This function is required to be called before calling any other Andee functions. This will setup the SPI communication on the Arduino Shield. The Slave Select pin will default to pin 8. class void begin(pin) If the Andee Slave Select pin conflicts with another shield, you can use argument pin to change the Andee Slave Select pin. Example Andee.begin(); Andee.begin(5); Change Andee Name class void setName(name) This function will change the name of the Andee Shield. This name will appear when scanning for your Andee Shield in the app. Only works on Firmware 2.00 and above. name is a Character Array Example Andee.setName(\"My New Name\"); Clear All Widgets class void clear() This function will clear all the widgets on the screen in the iOS/Android app Example Andee.clear(); Disconnect class void disconnect() This function will force the Andee Shield to disconnect from the iOS/Android device that it is connected to Example Andee.disconnect(); Check Connection class int isConnected() This function checks if the Andee Shield is connected to a device and returns an Integer. If the value returned is : 0 , the Andee Shield is not connected to a device 1 , the Andee Shield is connected to a device Example connected = Andee.isConnected(); Get Device Time class void getDeviceTime(*hour,*min,*sec) This function will get the time from the device that it is connected to. The time from the device will be stored in the hour , min and sec arguments in Integer Example Andee.getDeviceTime(&hour,&min,&sec); Get Device Date class void getDeviceDate(*day,*month,*year) This function will get the date from the device that it is connected to. The date from the device will be stored in the day , month and year arguments in Integer Example Andee.getDeviceDate(&day,&month,&year) Get Timestamp class long getDeviceTimeStamp() This function will get and return the timestamp in millis from the device that it is connected to. The return value will be a Long Example timeStamp = Andee.getDeviceTimeStamp(); Using Device Features The functions below makes use of the functions on the smart device. If the device does not have a particular feature, for example not all smartphones have a gyroscope, then the function will not work Vibrate Device class void vibrate() This function will cause the connected device to vibrate for approximately 1 second Example Andee.vibrate(); Gyroscope Sensor class void gyroInit(interval,iteration) This function will activate the gyroscope sensor on the device. The function can only be called once, unless the arguments are changed. The iOS/Android device will restart the interval timer each time this function is called. interval , is an Integer , will set the time interval in ms before sending another gyro data. iteration , is an Integer , will set the amount of times the gyro data should be sent. Set iteration to -1 for infinite iterations Once the initialisation has been called, call the function below to get the gyroscope values. class void getGyroReading(*xAxis,*yAxis,*zAxis) The values from the gyroscope sensor will be stored in the xAxis , yAxis and zAxis arguments in Float The readings can be stopped anytime by calling class void gyroStop() Example Andee.gyroInit(200,-1);//App will send data unlimited times at 200ms interval Andee.getGyroReading(&xAxis,&yAxis,&zAxis); Andee.gyroStop(); Linear Accelerometer Sensor class void lacInit(interval,iteration) This function will activate the Linear Accelerometer(LAC) sensor on the device. The function can only be called once, unless the arguments are changed. The iOS/Android device will restart the interval timer each time this function is called. interval , is an Integer , and will set the time interval in ms before sending another LAC data. iteration , is an Integer , and will set the amount of times the LAC data should be sent. Set iteration to -1 for infinite iterations Once the initialisation has been called, call the function below to get the LAC values. class void getLacReading(*xAxis,*yAxis,*zAxis) The values from the LAC sensor will be stored in the xAxis , yAxis and zAxis arguments in Float The readings can be stopped anytime by calling class void lacStop() Example Andee.lacInit(200,-1);//App will send data unlimited times at 200ms interval Andee.getLacReading(&xAxis,&yAxis,&zAxis); Andee.lacStop(); Gravity Sensor class void gravInit(interval,iteration) This function will activate the gravity sensor on the device. The function can only be called once, unless the arguments are changed. The iOS/Android device will restart the interval timer each time this function is called. interval , is an Integer , will set the time interval in ms before sending another gravity data. iteration , is an Integer , will set the amount of times the gravity data should be sent. Set iteration to -1 for infinite iterations Once the initialisation has been called, call the function below to get the gravity values. class void getGravReading(*xAxis,*yAxis,*zAxis) The values from the gravity sensor will be stored in the xAxis , yAxis and zAxis arguments in Float The readings can be stopped anytime by calling class void gravStop() Example Andee.gravInit(200,-1);//App will send data unlimited times at 200ms interval Andee.getGravReading(&xAxis,&yAxis,&zAxis); Andee.gravStop(); GPS Sensor class void gpsInit(interval,iteration) This function will activate the GPS sensor on the device. The function can only be called once, unless the arguments are changed. The iOS/Android device will restart the interval timer each time this function is called. interval , is an Integer , will set the time interval in ms before sending another GPS data. iteration , is an Integer , will set the amount of times the GPS data should be sent. Set iteration to -1 for infinite iterations Once the initialisation has been called, call the function below to get the GPS values. class void getGpsReading(*xAxis,*yAxis) The values from the GPS sensor will be stored in the xAxis and yAxis arguments in Float The readings can be stopped anytime by calling class void gpsStop() Example Andee.gpsInit(200,-1);//App will send data unlimited times at 200ms interval Andee.getGpsReading(&xAxis,&yAxis); Andee.gpsStop(); Taking Photos class void takePhoto(cameraType,autoFocus,flash) This function will make the connected device take 1 photo depending on the arguments below For cameraType use either * CAM_DEFAULT to use default camera * FRONT to use Front Camera * BACK to use Rear Camera For autoFocus use * ON to switch on auto focus * OFF to switch off auto focus For flash use * ON to switch on flash * OFF to switch off flash Example Andee.takePhoto(BACK,ON,ON); Text to Speech class void textToSpeech(speech,speed,pitch,accent) This function will activate the text to speech(TTS) function on the device. The app will then speak the text in the speech string. The arguments are speech , is a Character Array , that the device will speak speed , is a Float , is the speed of the speech pitch , is a Float , is the pitch of the voice accent of the voice. Use * US * GREAT_BRITON * AUSTRALIA * IRELAND * SOUTH_AFRICA Android devices require installation of the required language pack to use different accents. Example Andee.textToSpeech(\"This is Annikken Andee\",1.0,0.5,US); Notification class void notification(title,message,ticker) This function will pop a notification on the connected device. This only works on Android devices . The arguments are title , is a Character Array , is the title of the notification message , is a Character Array , is the main text of the notification ticker , is a Character Array , is the small text when the notification has not been expanded yet Example Andee.notification(\"Andee Notify\",\"Just some text for the body of the SMS\",\"Andee\"); AndeeHelper Functions The AndeeHelper Class has functions that help the user create the widgets on the app. A new instantiation of the class has to be made for each widget. For example, AndeeHelper widget1;//1 instantiation AndeeHelper widget2;//Another instantiation widget1.setId(5);//when using one of the functions below You can then use the functions below with each instantiation. Every example from here onwards will use widget1 as the example. Set Id class void setId(id) Set widget id id , is a char , can be a number from 0 to 49 Example widget1.setId(49); Set Type class void setType(type) type uses macros as the input. Available types are DATA_OUT DATA_OUT_CIRCLE DATA_OUT_HEADER BUTTON_IN CIRCLE_BUTTON ANALOG_DIAL_OUT KEYBOARD_IN DATE_IN TIME_IN SLIDER_IN TEXTBOX TTS JOYSTICK Example widget1.setType(DATA_OUT); Set Location class void setLocation(row,column,span) row , is a char , can be a number from 0 to 3 column , is a char , can be a number from 0 to 3 span uses macros as the input. Available macros are ONE_THIRD TWO_THIRD ONE_QUART THREE_QUART HALF FULL Example widget1.setLocation(2,2,ONE_THIRD); Set Coordinates class void setCoord(xCoordinate,yCoordinate,width,height) xCoordinate , is an Integer , can be a number from 0 to 100 yCoordinate , is an Integer , can be a number from 0 to 100 width , is an Integer , can be a number from 0 to 100 height , is an Integer , can be a number from 0 to 100 Example widget1.setCoord(0,0,100,25); Set Color The widget has a few colors that can be customised. The widget body, widget body text, widget title and widget title text. class void setColor(color) This is to set widget body color class void setTextColor(color) This is to set widget body text color class void setTitleColor(color) This is to set widget title color class void setTitleTextColor(color) This is to set widget title text color color is a Character Array . color should be a color hex in the form of AARRGGBB, where A is alpha, R is red, g is green and B is blue. For example, \"FFFF0000\" is red. There are also macros that can be used. All the possible macros will be listed here . Example widget1.setColor(WHITE); widget1.setTextColor(RED); widget1.setTitleColor(DARK_RED); widget1.setTitleTextColor(WHITE); Set Data class void setData(data) class void setData(dataFloat,decimalPlace) This function sets the widget data display. data can accept an Integer and a Character Array dataFloat accepts a Float and a decimal place needs to be specified at decimalPlace Example widget1.setData(345); or widget1.setData(\"Info Here\"); or widget1.setData(1.345,3); Set Title class void setTitle(title) class void setTitle(titleFloat,decimalPlace) This function sets the widget title display. title can accept an Integer and a Character Array . titleFloat accepts a Float and a decimal place needs to be specified at decimalPlace Example widget1.setTitle(345); or widget1.setTitle(\"Header Here\"); or widget1.setTitle(1.345,3); Set Units class void setUnit(units) class void setUnit(unitFloat,decimalPlace) This function sets the widget units display. units can accept an Integer and a Character Array . unitFloat accepts a Float and a decimal place needs to be specified at decimalPlace Example widget1.setUnit(345); or widget1.setUnit(\"Extra Info Here\"); or widget1.setUnit(1.345,3); Update Widget class void update() This function is very important to the Annikken Andee. If this function is not called, the widget will not appear. This function can be called at specific parts of the sketch to control the way the widget is updated. Example widget1.update(); Remove Widget class void remove() This function tells the connected device to remove the corresponding widget when called. Example widget1.remove(); Set Min Max Note: This function is only for Slider and Analog Circle Widgets class void setMinMax(min,max) class void setMinMax(minFloat,maxFloat,decimalPlace) This function sets the minimum and maximum value for the Slider and Analog Circle widgets. min and max are Integer . minFloat and maxFloat are Float and a decimal place needs to be specified at decimalPlace Example widget.setMinMax(0,50) or widget1.setMinMax(0.00,50.00,2); Input Widget Functions The functions below are only needed if the Slider , Button , Circle Button , Date , Time and Keyboard widgets are used Set Input Mode class void setInputMode(mode) mode uses macros as the input. Available macros are: For BUTTON_IN and CIRCLE_BUTTON , use ACK for acknowledged button presses or NO_ACK for a multi press button. For SLIDER_IN , use ON_FINGER_UP for a slider that updates the value upon lifting the finger from the screen, ON_VALUE_CHANGE for a slider that updates the value as soon as the values change or NO_FINGER for a slider that looks like a progress bar,with no interaction needed For KEYBOARD_IN , use ALPHA_NUMERIC for AlphaNumeric Keyboard, ALPHA_NUMERIC_PW for AlphaNumeric keyboard that hides the typed character after a few seconds, NUMERIC for a Numeric Keyboard with symbols or NUMERIC_PW for a Numeric Keyboard that hides typed characters after a few seconds Both Date and Time only have 1 input mode Example widget1.setType(BUTTON_IN); widget1.setInputMode(ACK); Slider Widget Specific Functions The next 3 functions are only used for slider widgets Move Slider Thumb class void moveSliderToValue(value) class void moveSliderToValue(valueFloat,decimalPlace) This function moves the slider thumb to the position as defined in the argument value or valueFloat value is an integer. valueFloat is a Float and a decimal place needs to be specified at decimalPlace Example widget1.moveSliderToValue(50); or widget1.moveSliderToValue(34.4,1); Set the Number of Intervals for Slider class void setSliderNumIntervals(value) This function sets the number of intervals (or number of steps) the slider widget has. value is an Integer Example widget1.setSliderNumIntervals(100); Get Slider Value class int getSliderValue() class float getSliderValue() This function is to get the value of the slider from the app. The function will return an Integer or a Float Example sliderValue = widget1.getSliderValue(); Button Widget Specific Functions The widgets Button , Circle Button , Date and Time widgets use the functions below isPressed class int isPressed() This function is used to check if a button widget has been pressed. This function returns the number of times the button has been pressed and a 0 if the button is not pressed Example if(widget1.isPressed() > 0) { ........................... } or int buttonPressed = widget1.isPressed(); Acknowledgement class void ack() This function will send an acknowledgement packet to the connected device. This is required when the input mode of the button widget has been set to acknowledgement Example widget1.ack(); Keyboard Widget Specific Functions Get Keyboard Message class void getKeyboardMessage(*appReply) This function is to get the reply when the Keyboard Widget is used. The function will store the reply in the appReply as a Character Array Example widget1.getKeyboardMessage(&getReply); Date Widget Specific Functions Set Default Date class void setDefaultDate(day, month, year) This function sets the default day when the date widget is used. When the user taps on the widget, a calendar is presented and the cursor will highlight the default day. Both day and year are Integer while month can accept Integer and months in macro. The available macros are Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec Example widget1.setDefaultDate(07,Feb,2016); Get Date class void getDateInput(*day,*month,*year) This function is used to get the date input from the Date widget. The values will be stored accordingly into day , month and year Example widget1.getDateInput(&day,&month,&year); Time Widget Specific Functions Set Default Time class void setDefaultTime(hour,minute,second) This function sets the default time when the Time widget is used. When the user taps on the widget, a pop up on the app will show the default time. Example widget1.setDefaultTime(05,30,00); Get Time class void getTimeInput(hour,minute,second) This function is used to get the time input from the Time widget. The values will be stored accordingly into hour , minute , second widget1.getTimeInput(&hour,&minute,&second);","title":"Andee API"},{"location":"AndeeAPI/#annikken-andee-library","text":"These are all the functions that can be found in the Andee Library","title":"Annikken Andee Library"},{"location":"AndeeAPI/#andee-functions","text":"The Andee Class has general functions that affects the way the Andee Shield works or what it does.","title":"Andee functions"},{"location":"AndeeAPI/#begin","text":"class void begin() This function is required to be called before calling any other Andee functions. This will setup the SPI communication on the Arduino Shield. The Slave Select pin will default to pin 8. class void begin(pin) If the Andee Slave Select pin conflicts with another shield, you can use argument pin to change the Andee Slave Select pin.","title":"Begin"},{"location":"AndeeAPI/#example","text":"Andee.begin(); Andee.begin(5);","title":"Example"},{"location":"AndeeAPI/#change-andee-name","text":"class void setName(name) This function will change the name of the Andee Shield. This name will appear when scanning for your Andee Shield in the app. Only works on Firmware 2.00 and above. name is a Character Array","title":"Change Andee Name"},{"location":"AndeeAPI/#example_1","text":"Andee.setName(\"My New Name\");","title":"Example"},{"location":"AndeeAPI/#clear-all-widgets","text":"class void clear() This function will clear all the widgets on the screen in the iOS/Android app","title":"Clear All Widgets"},{"location":"AndeeAPI/#example_2","text":"Andee.clear();","title":"Example"},{"location":"AndeeAPI/#disconnect","text":"class void disconnect() This function will force the Andee Shield to disconnect from the iOS/Android device that it is connected to","title":"Disconnect"},{"location":"AndeeAPI/#example_3","text":"Andee.disconnect();","title":"Example"},{"location":"AndeeAPI/#check-connection","text":"class int isConnected() This function checks if the Andee Shield is connected to a device and returns an Integer. If the value returned is : 0 , the Andee Shield is not connected to a device 1 , the Andee Shield is connected to a device","title":"Check Connection"},{"location":"AndeeAPI/#example_4","text":"connected = Andee.isConnected();","title":"Example"},{"location":"AndeeAPI/#get-device-time","text":"class void getDeviceTime(*hour,*min,*sec) This function will get the time from the device that it is connected to. The time from the device will be stored in the hour , min and sec arguments in Integer","title":"Get Device Time"},{"location":"AndeeAPI/#example_5","text":"Andee.getDeviceTime(&hour,&min,&sec);","title":"Example"},{"location":"AndeeAPI/#get-device-date","text":"class void getDeviceDate(*day,*month,*year) This function will get the date from the device that it is connected to. The date from the device will be stored in the day , month and year arguments in Integer","title":"Get Device Date"},{"location":"AndeeAPI/#example_6","text":"Andee.getDeviceDate(&day,&month,&year)","title":"Example"},{"location":"AndeeAPI/#get-timestamp","text":"class long getDeviceTimeStamp() This function will get and return the timestamp in millis from the device that it is connected to. The return value will be a Long","title":"Get Timestamp"},{"location":"AndeeAPI/#example_7","text":"timeStamp = Andee.getDeviceTimeStamp();","title":"Example"},{"location":"AndeeAPI/#using-device-features","text":"The functions below makes use of the functions on the smart device. If the device does not have a particular feature, for example not all smartphones have a gyroscope, then the function will not work","title":"Using Device Features"},{"location":"AndeeAPI/#vibrate-device","text":"class void vibrate() This function will cause the connected device to vibrate for approximately 1 second","title":"Vibrate Device"},{"location":"AndeeAPI/#example_8","text":"Andee.vibrate();","title":"Example"},{"location":"AndeeAPI/#gyroscope-sensor","text":"class void gyroInit(interval,iteration) This function will activate the gyroscope sensor on the device. The function can only be called once, unless the arguments are changed. The iOS/Android device will restart the interval timer each time this function is called. interval , is an Integer , will set the time interval in ms before sending another gyro data. iteration , is an Integer , will set the amount of times the gyro data should be sent. Set iteration to -1 for infinite iterations Once the initialisation has been called, call the function below to get the gyroscope values. class void getGyroReading(*xAxis,*yAxis,*zAxis) The values from the gyroscope sensor will be stored in the xAxis , yAxis and zAxis arguments in Float The readings can be stopped anytime by calling class void gyroStop()","title":"Gyroscope Sensor"},{"location":"AndeeAPI/#example_9","text":"Andee.gyroInit(200,-1);//App will send data unlimited times at 200ms interval Andee.getGyroReading(&xAxis,&yAxis,&zAxis); Andee.gyroStop();","title":"Example"},{"location":"AndeeAPI/#linear-accelerometer-sensor","text":"class void lacInit(interval,iteration) This function will activate the Linear Accelerometer(LAC) sensor on the device. The function can only be called once, unless the arguments are changed. The iOS/Android device will restart the interval timer each time this function is called. interval , is an Integer , and will set the time interval in ms before sending another LAC data. iteration , is an Integer , and will set the amount of times the LAC data should be sent. Set iteration to -1 for infinite iterations Once the initialisation has been called, call the function below to get the LAC values. class void getLacReading(*xAxis,*yAxis,*zAxis) The values from the LAC sensor will be stored in the xAxis , yAxis and zAxis arguments in Float The readings can be stopped anytime by calling class void lacStop()","title":"Linear Accelerometer Sensor"},{"location":"AndeeAPI/#example_10","text":"Andee.lacInit(200,-1);//App will send data unlimited times at 200ms interval Andee.getLacReading(&xAxis,&yAxis,&zAxis); Andee.lacStop();","title":"Example"},{"location":"AndeeAPI/#gravity-sensor","text":"class void gravInit(interval,iteration) This function will activate the gravity sensor on the device. The function can only be called once, unless the arguments are changed. The iOS/Android device will restart the interval timer each time this function is called. interval , is an Integer , will set the time interval in ms before sending another gravity data. iteration , is an Integer , will set the amount of times the gravity data should be sent. Set iteration to -1 for infinite iterations Once the initialisation has been called, call the function below to get the gravity values. class void getGravReading(*xAxis,*yAxis,*zAxis) The values from the gravity sensor will be stored in the xAxis , yAxis and zAxis arguments in Float The readings can be stopped anytime by calling class void gravStop()","title":"Gravity Sensor"},{"location":"AndeeAPI/#example_11","text":"Andee.gravInit(200,-1);//App will send data unlimited times at 200ms interval Andee.getGravReading(&xAxis,&yAxis,&zAxis); Andee.gravStop();","title":"Example"},{"location":"AndeeAPI/#gps-sensor","text":"class void gpsInit(interval,iteration) This function will activate the GPS sensor on the device. The function can only be called once, unless the arguments are changed. The iOS/Android device will restart the interval timer each time this function is called. interval , is an Integer , will set the time interval in ms before sending another GPS data. iteration , is an Integer , will set the amount of times the GPS data should be sent. Set iteration to -1 for infinite iterations Once the initialisation has been called, call the function below to get the GPS values. class void getGpsReading(*xAxis,*yAxis) The values from the GPS sensor will be stored in the xAxis and yAxis arguments in Float The readings can be stopped anytime by calling class void gpsStop()","title":"GPS Sensor"},{"location":"AndeeAPI/#example_12","text":"Andee.gpsInit(200,-1);//App will send data unlimited times at 200ms interval Andee.getGpsReading(&xAxis,&yAxis); Andee.gpsStop();","title":"Example"},{"location":"AndeeAPI/#taking-photos","text":"class void takePhoto(cameraType,autoFocus,flash) This function will make the connected device take 1 photo depending on the arguments below For cameraType use either * CAM_DEFAULT to use default camera * FRONT to use Front Camera * BACK to use Rear Camera For autoFocus use * ON to switch on auto focus * OFF to switch off auto focus For flash use * ON to switch on flash * OFF to switch off flash","title":"Taking Photos"},{"location":"AndeeAPI/#example_13","text":"Andee.takePhoto(BACK,ON,ON);","title":"Example"},{"location":"AndeeAPI/#text-to-speech","text":"class void textToSpeech(speech,speed,pitch,accent) This function will activate the text to speech(TTS) function on the device. The app will then speak the text in the speech string. The arguments are speech , is a Character Array , that the device will speak speed , is a Float , is the speed of the speech pitch , is a Float , is the pitch of the voice accent of the voice. Use * US * GREAT_BRITON * AUSTRALIA * IRELAND * SOUTH_AFRICA Android devices require installation of the required language pack to use different accents.","title":"Text to Speech"},{"location":"AndeeAPI/#example_14","text":"Andee.textToSpeech(\"This is Annikken Andee\",1.0,0.5,US);","title":"Example"},{"location":"AndeeAPI/#notification","text":"class void notification(title,message,ticker) This function will pop a notification on the connected device. This only works on Android devices . The arguments are title , is a Character Array , is the title of the notification message , is a Character Array , is the main text of the notification ticker , is a Character Array , is the small text when the notification has not been expanded yet","title":"Notification"},{"location":"AndeeAPI/#example_15","text":"Andee.notification(\"Andee Notify\",\"Just some text for the body of the SMS\",\"Andee\");","title":"Example"},{"location":"AndeeAPI/#andeehelper-functions","text":"The AndeeHelper Class has functions that help the user create the widgets on the app. A new instantiation of the class has to be made for each widget. For example, AndeeHelper widget1;//1 instantiation AndeeHelper widget2;//Another instantiation widget1.setId(5);//when using one of the functions below You can then use the functions below with each instantiation. Every example from here onwards will use widget1 as the example.","title":"AndeeHelper Functions"},{"location":"AndeeAPI/#set-id","text":"class void setId(id) Set widget id id , is a char , can be a number from 0 to 49","title":"Set Id"},{"location":"AndeeAPI/#example_16","text":"widget1.setId(49);","title":"Example"},{"location":"AndeeAPI/#set-type","text":"class void setType(type) type uses macros as the input. Available types are DATA_OUT DATA_OUT_CIRCLE DATA_OUT_HEADER BUTTON_IN CIRCLE_BUTTON ANALOG_DIAL_OUT KEYBOARD_IN DATE_IN TIME_IN SLIDER_IN TEXTBOX TTS JOYSTICK","title":"Set Type"},{"location":"AndeeAPI/#example_17","text":"widget1.setType(DATA_OUT);","title":"Example"},{"location":"AndeeAPI/#set-location","text":"class void setLocation(row,column,span) row , is a char , can be a number from 0 to 3 column , is a char , can be a number from 0 to 3 span uses macros as the input. Available macros are ONE_THIRD TWO_THIRD ONE_QUART THREE_QUART HALF FULL","title":"Set Location"},{"location":"AndeeAPI/#example_18","text":"widget1.setLocation(2,2,ONE_THIRD);","title":"Example"},{"location":"AndeeAPI/#set-coordinates","text":"class void setCoord(xCoordinate,yCoordinate,width,height) xCoordinate , is an Integer , can be a number from 0 to 100 yCoordinate , is an Integer , can be a number from 0 to 100 width , is an Integer , can be a number from 0 to 100 height , is an Integer , can be a number from 0 to 100","title":"Set Coordinates"},{"location":"AndeeAPI/#example_19","text":"widget1.setCoord(0,0,100,25);","title":"Example"},{"location":"AndeeAPI/#set-color","text":"The widget has a few colors that can be customised. The widget body, widget body text, widget title and widget title text. class void setColor(color) This is to set widget body color class void setTextColor(color) This is to set widget body text color class void setTitleColor(color) This is to set widget title color class void setTitleTextColor(color) This is to set widget title text color color is a Character Array . color should be a color hex in the form of AARRGGBB, where A is alpha, R is red, g is green and B is blue. For example, \"FFFF0000\" is red. There are also macros that can be used. All the possible macros will be listed here .","title":"Set Color"},{"location":"AndeeAPI/#example_20","text":"widget1.setColor(WHITE); widget1.setTextColor(RED); widget1.setTitleColor(DARK_RED); widget1.setTitleTextColor(WHITE);","title":"Example"},{"location":"AndeeAPI/#set-data","text":"class void setData(data) class void setData(dataFloat,decimalPlace) This function sets the widget data display. data can accept an Integer and a Character Array dataFloat accepts a Float and a decimal place needs to be specified at decimalPlace","title":"Set Data"},{"location":"AndeeAPI/#example_21","text":"widget1.setData(345); or widget1.setData(\"Info Here\"); or widget1.setData(1.345,3);","title":"Example"},{"location":"AndeeAPI/#set-title","text":"class void setTitle(title) class void setTitle(titleFloat,decimalPlace) This function sets the widget title display. title can accept an Integer and a Character Array . titleFloat accepts a Float and a decimal place needs to be specified at decimalPlace","title":"Set Title"},{"location":"AndeeAPI/#example_22","text":"widget1.setTitle(345); or widget1.setTitle(\"Header Here\"); or widget1.setTitle(1.345,3);","title":"Example"},{"location":"AndeeAPI/#set-units","text":"class void setUnit(units) class void setUnit(unitFloat,decimalPlace) This function sets the widget units display. units can accept an Integer and a Character Array . unitFloat accepts a Float and a decimal place needs to be specified at decimalPlace","title":"Set Units"},{"location":"AndeeAPI/#example_23","text":"widget1.setUnit(345); or widget1.setUnit(\"Extra Info Here\"); or widget1.setUnit(1.345,3);","title":"Example"},{"location":"AndeeAPI/#update-widget","text":"class void update() This function is very important to the Annikken Andee. If this function is not called, the widget will not appear. This function can be called at specific parts of the sketch to control the way the widget is updated.","title":"Update Widget"},{"location":"AndeeAPI/#example_24","text":"widget1.update();","title":"Example"},{"location":"AndeeAPI/#remove-widget","text":"class void remove() This function tells the connected device to remove the corresponding widget when called.","title":"Remove Widget"},{"location":"AndeeAPI/#example_25","text":"widget1.remove();","title":"Example"},{"location":"AndeeAPI/#set-min-max","text":"Note: This function is only for Slider and Analog Circle Widgets class void setMinMax(min,max) class void setMinMax(minFloat,maxFloat,decimalPlace) This function sets the minimum and maximum value for the Slider and Analog Circle widgets. min and max are Integer . minFloat and maxFloat are Float and a decimal place needs to be specified at decimalPlace","title":"Set Min Max"},{"location":"AndeeAPI/#example_26","text":"widget.setMinMax(0,50) or widget1.setMinMax(0.00,50.00,2);","title":"Example"},{"location":"AndeeAPI/#input-widget-functions","text":"The functions below are only needed if the Slider , Button , Circle Button , Date , Time and Keyboard widgets are used","title":"Input Widget Functions"},{"location":"AndeeAPI/#set-input-mode","text":"class void setInputMode(mode) mode uses macros as the input. Available macros are: For BUTTON_IN and CIRCLE_BUTTON , use ACK for acknowledged button presses or NO_ACK for a multi press button. For SLIDER_IN , use ON_FINGER_UP for a slider that updates the value upon lifting the finger from the screen, ON_VALUE_CHANGE for a slider that updates the value as soon as the values change or NO_FINGER for a slider that looks like a progress bar,with no interaction needed For KEYBOARD_IN , use ALPHA_NUMERIC for AlphaNumeric Keyboard, ALPHA_NUMERIC_PW for AlphaNumeric keyboard that hides the typed character after a few seconds, NUMERIC for a Numeric Keyboard with symbols or NUMERIC_PW for a Numeric Keyboard that hides typed characters after a few seconds Both Date and Time only have 1 input mode","title":"Set Input Mode"},{"location":"AndeeAPI/#example_27","text":"widget1.setType(BUTTON_IN); widget1.setInputMode(ACK);","title":"Example"},{"location":"AndeeAPI/#slider-widget-specific-functions","text":"The next 3 functions are only used for slider widgets","title":"Slider Widget Specific Functions"},{"location":"AndeeAPI/#move-slider-thumb","text":"class void moveSliderToValue(value) class void moveSliderToValue(valueFloat,decimalPlace) This function moves the slider thumb to the position as defined in the argument value or valueFloat value is an integer. valueFloat is a Float and a decimal place needs to be specified at decimalPlace","title":"Move Slider Thumb"},{"location":"AndeeAPI/#example_28","text":"widget1.moveSliderToValue(50); or widget1.moveSliderToValue(34.4,1);","title":"Example"},{"location":"AndeeAPI/#set-the-number-of-intervals-for-slider","text":"class void setSliderNumIntervals(value) This function sets the number of intervals (or number of steps) the slider widget has. value is an Integer","title":"Set the Number of Intervals for Slider"},{"location":"AndeeAPI/#example_29","text":"widget1.setSliderNumIntervals(100);","title":"Example"},{"location":"AndeeAPI/#get-slider-value","text":"class int getSliderValue() class float getSliderValue() This function is to get the value of the slider from the app. The function will return an Integer or a Float","title":"Get Slider Value"},{"location":"AndeeAPI/#example_30","text":"sliderValue = widget1.getSliderValue();","title":"Example"},{"location":"AndeeAPI/#button-widget-specific-functions","text":"The widgets Button , Circle Button , Date and Time widgets use the functions below","title":"Button Widget Specific Functions"},{"location":"AndeeAPI/#ispressed","text":"class int isPressed() This function is used to check if a button widget has been pressed. This function returns the number of times the button has been pressed and a 0 if the button is not pressed","title":"isPressed"},{"location":"AndeeAPI/#example_31","text":"if(widget1.isPressed() > 0) { ........................... } or int buttonPressed = widget1.isPressed();","title":"Example"},{"location":"AndeeAPI/#acknowledgement","text":"class void ack() This function will send an acknowledgement packet to the connected device. This is required when the input mode of the button widget has been set to acknowledgement","title":"Acknowledgement"},{"location":"AndeeAPI/#example_32","text":"widget1.ack();","title":"Example"},{"location":"AndeeAPI/#keyboard-widget-specific-functions","text":"","title":"Keyboard Widget Specific Functions"},{"location":"AndeeAPI/#get-keyboard-message","text":"class void getKeyboardMessage(*appReply) This function is to get the reply when the Keyboard Widget is used. The function will store the reply in the appReply as a Character Array","title":"Get Keyboard Message"},{"location":"AndeeAPI/#example_33","text":"widget1.getKeyboardMessage(&getReply);","title":"Example"},{"location":"AndeeAPI/#date-widget-specific-functions","text":"","title":"Date Widget Specific Functions"},{"location":"AndeeAPI/#set-default-date","text":"class void setDefaultDate(day, month, year) This function sets the default day when the date widget is used. When the user taps on the widget, a calendar is presented and the cursor will highlight the default day. Both day and year are Integer while month can accept Integer and months in macro. The available macros are Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec","title":"Set Default Date"},{"location":"AndeeAPI/#example_34","text":"widget1.setDefaultDate(07,Feb,2016);","title":"Example"},{"location":"AndeeAPI/#get-date","text":"class void getDateInput(*day,*month,*year) This function is used to get the date input from the Date widget. The values will be stored accordingly into day , month and year","title":"Get Date"},{"location":"AndeeAPI/#example_35","text":"widget1.getDateInput(&day,&month,&year);","title":"Example"},{"location":"AndeeAPI/#time-widget-specific-functions","text":"","title":"Time Widget Specific Functions"},{"location":"AndeeAPI/#set-default-time","text":"class void setDefaultTime(hour,minute,second) This function sets the default time when the Time widget is used. When the user taps on the widget, a pop up on the app will show the default time.","title":"Set Default Time"},{"location":"AndeeAPI/#example_36","text":"widget1.setDefaultTime(05,30,00);","title":"Example"},{"location":"AndeeAPI/#get-time","text":"class void getTimeInput(hour,minute,second) This function is used to get the time input from the Time widget. The values will be stored accordingly into hour , minute , second widget1.getTimeInput(&hour,&minute,&second);","title":"Get Time"},{"location":"AndeeSetup/","text":"Getting Started This section will guide you in setting up your new Annikken Andee shield for your Arduino projects. If you have just gotten your Annikken Andee shield, go through each step to ensure a smooth setup or you can skip to the relevant topic if you already have completed some of it. If you come across any issues, please check our support page for your relevant product. If the solution is not available there, feel free to contact us . Installing Arduino IDE Coding for Arduino and Annikken Andee is done using the Arduino Integrated Development Environment(IDE). Before you proceed, you should ensure that you have the Arduino IDE installed on your computer. If the Arduino IDE is not installed, proceed to download the Arduino IDE at Arduino . Just get the latest version. Installing Andee Library The Annikken Andee Library can be easily installed by using Arduino IDE's built-in library manager. Follow these steps to install the Andee Library. In your Arduino IDE, select Sketch >> Include Library >> Manage Libraries. Filter the library search by typing \"andee\" into the search box in the top right corner. Select the latest version from the drop down menu and hit install. You are now ready to create your UI on the Annikken Andee Proceed to the Before You Code Section to learn the code that using Andee require or you can go straight to tutorials on the Andee Library in Arduino IDE","title":"First Time Setup"},{"location":"AndeeSetup/#getting-started","text":"This section will guide you in setting up your new Annikken Andee shield for your Arduino projects. If you have just gotten your Annikken Andee shield, go through each step to ensure a smooth setup or you can skip to the relevant topic if you already have completed some of it. If you come across any issues, please check our support page for your relevant product. If the solution is not available there, feel free to contact us .","title":"Getting Started"},{"location":"AndeeSetup/#installing-arduino-ide","text":"Coding for Arduino and Annikken Andee is done using the Arduino Integrated Development Environment(IDE). Before you proceed, you should ensure that you have the Arduino IDE installed on your computer. If the Arduino IDE is not installed, proceed to download the Arduino IDE at Arduino . Just get the latest version.","title":"Installing Arduino IDE"},{"location":"AndeeSetup/#installing-andee-library","text":"The Annikken Andee Library can be easily installed by using Arduino IDE's built-in library manager. Follow these steps to install the Andee Library. In your Arduino IDE, select Sketch >> Include Library >> Manage Libraries. Filter the library search by typing \"andee\" into the search box in the top right corner. Select the latest version from the drop down menu and hit install.","title":"Installing Andee Library"},{"location":"AndeeSetup/#you-are-now-ready-to-create-your-ui-on-the-annikken-andee","text":"Proceed to the Before You Code Section to learn the code that using Andee require or you can go straight to tutorials on the Andee Library in Arduino IDE","title":"You are now ready to create your UI on the Annikken Andee"},{"location":"Andee_Color/","text":"Andee Colors This page lists all the color macros that can be used with the Annikken Andee. TEXT_LIGHT , TEXT_DARK , PINK , LIGHT_PINK , HOT_PINK , DEEP_PINK , PALE_VIOLET_RED , MEDIUM_VIOLET_RED , LIGHT_SALMON , SALMON , DARK_SALMON , LIGHT_CORAL , INDIAN_RED , CRIMSON , FIRE_BRICK , DARK_RED , RED , ORANGE_RED , TOMATO , CORAL , DARK_ORANGE , ORANGE , GOLD , YELLOW , LIGHT_YELLOW , LEMON_CHIFFON , LIGHT_GOLDENROD_YELLOW , PAPAYA_WHIP , MOCCASIN , PEACH_PUFF , PALE_GOLDENROD , KHAKI , DARK_KHAKI , CORNSILK , BLANCHED_ALMOND , BISQUE , NAVAJO_WHITE , WHEAT , BURLYWOOD , TAN , ROSY_BROWN , SANDY_BROWN , GOLDENROD , DARK_GOLDENROD , PERU , CHOCOLATE , SADDLE_BROWN , SIENNA , BROWN , MAROON , DARK_OLIVE_GREEN , OLIVE , OLIVE_DRAB , YELLOW_GREEN , LIME_GREEN , LIME , LAWN_GREEN , CHARTREUSE , GREEN_YELLOW , SPRING_GREEN , MEDIUM_SPRING_GREEN , LIGHT_GREEN , PALE_GREEN , DARK_SEA_GREEN , MEDIUM_SEA_GREEN , SEA_GREEN , FORREST_GREEN , GREEN , DARK_GREEN , MEDIUM_AQUAMARINE , AQUA , CYAN , LIGHT_CYAN , PALE_TURQUOISE , AQUAMARINE , TURQUOISE , MEDIUM_TURQUOISE , DARK_TURQUOISE , LIGHT_SEA_GREEN , CADET_BLUE , DARK_CYAN , TEAL , LIGHT_STEEL_BLUE , POWDER_BLUE , LIGHT_BLUE , SKY_BLUE , LIGHT_SKY_BLUE , DEEP_SKY_BLUE , DODGER_BLUE , CORNFLOWER_BLUE , STEEL_BLUE , ROYAL_BLUE , BLUE , MEDIUM_BLUE , DARK_BLUE , NAVY , MIDNIGHT_BLUE , LAVENDER , THISTLE , PLUM , VIOLET , ORCHID , FUCHSIA , MAGENTA , MEDIUM_ORCHID , MEDIUM_PURPLE , BLUE_VIOLET , DARK_VIOLET , DARK_ORCHID , DARK_MAGENTA , PURPLE , INDIGO , DARK_SLATE_BLUE , SLATE_BLUE , MEDIUM_SLATE_BLUE , WHITE , SNOW , HONEYDEW , MINT_CREAM , AZURE , ALICE_BLUE , GHOST_WHITE , WHITE_SMOKE , SEASHELL , BEIGE , OLD_LACE , FLORAL_WHITE , IVORY , ANTIQUE_WHITE , LINEN , LAVENDER_BLUSH , MISTY_ROSE , GAINSBORO , LIGHTGRAY , SILVER , DARK_GRAY , GRAY , DIM_GRAY , LIGHT_SLATE_GRAY , SLATE_GRAY , DARK_SLATE_GRAY , BLACK , TRANSPARENT , DEFAULT_COLOR , DEFAULT_TITLE_COLOR","title":"Andee Colors"},{"location":"Andee_Color/#andee-colors","text":"This page lists all the color macros that can be used with the Annikken Andee. TEXT_LIGHT , TEXT_DARK , PINK , LIGHT_PINK , HOT_PINK , DEEP_PINK , PALE_VIOLET_RED , MEDIUM_VIOLET_RED , LIGHT_SALMON , SALMON , DARK_SALMON , LIGHT_CORAL , INDIAN_RED , CRIMSON , FIRE_BRICK , DARK_RED , RED , ORANGE_RED , TOMATO , CORAL , DARK_ORANGE , ORANGE , GOLD , YELLOW , LIGHT_YELLOW , LEMON_CHIFFON , LIGHT_GOLDENROD_YELLOW , PAPAYA_WHIP , MOCCASIN , PEACH_PUFF , PALE_GOLDENROD , KHAKI , DARK_KHAKI , CORNSILK , BLANCHED_ALMOND , BISQUE , NAVAJO_WHITE , WHEAT , BURLYWOOD , TAN , ROSY_BROWN , SANDY_BROWN , GOLDENROD , DARK_GOLDENROD , PERU , CHOCOLATE , SADDLE_BROWN , SIENNA , BROWN , MAROON , DARK_OLIVE_GREEN , OLIVE , OLIVE_DRAB , YELLOW_GREEN , LIME_GREEN , LIME , LAWN_GREEN , CHARTREUSE , GREEN_YELLOW , SPRING_GREEN , MEDIUM_SPRING_GREEN , LIGHT_GREEN , PALE_GREEN , DARK_SEA_GREEN , MEDIUM_SEA_GREEN , SEA_GREEN , FORREST_GREEN , GREEN , DARK_GREEN , MEDIUM_AQUAMARINE , AQUA , CYAN , LIGHT_CYAN , PALE_TURQUOISE , AQUAMARINE , TURQUOISE , MEDIUM_TURQUOISE , DARK_TURQUOISE , LIGHT_SEA_GREEN , CADET_BLUE , DARK_CYAN , TEAL , LIGHT_STEEL_BLUE , POWDER_BLUE , LIGHT_BLUE , SKY_BLUE , LIGHT_SKY_BLUE , DEEP_SKY_BLUE , DODGER_BLUE , CORNFLOWER_BLUE , STEEL_BLUE , ROYAL_BLUE , BLUE , MEDIUM_BLUE , DARK_BLUE , NAVY , MIDNIGHT_BLUE , LAVENDER , THISTLE , PLUM , VIOLET , ORCHID , FUCHSIA , MAGENTA , MEDIUM_ORCHID , MEDIUM_PURPLE , BLUE_VIOLET , DARK_VIOLET , DARK_ORCHID , DARK_MAGENTA , PURPLE , INDIGO , DARK_SLATE_BLUE , SLATE_BLUE , MEDIUM_SLATE_BLUE , WHITE , SNOW , HONEYDEW , MINT_CREAM , AZURE , ALICE_BLUE , GHOST_WHITE , WHITE_SMOKE , SEASHELL , BEIGE , OLD_LACE , FLORAL_WHITE , IVORY , ANTIQUE_WHITE , LINEN , LAVENDER_BLUSH , MISTY_ROSE , GAINSBORO , LIGHTGRAY , SILVER , DARK_GRAY , GRAY , DIM_GRAY , LIGHT_SLATE_GRAY , SLATE_GRAY , DARK_SLATE_GRAY , BLACK , TRANSPARENT , DEFAULT_COLOR , DEFAULT_TITLE_COLOR","title":"Andee Colors"},{"location":"AnnikkenProducts/","text":"Annikken Products This documentation provides tutorials and API reference for the products listed below. Andee U Andee U connects to both iOS and Android devices. Andee Android Andee Android connects to Android devices. Andee iOS Andee iOS connects to iOS Devices. Note: Out-of-Stock but will still get firmware updates","title":"Andee Products"},{"location":"AnnikkenProducts/#annikken-products","text":"This documentation provides tutorials and API reference for the products listed below.","title":"Annikken Products"},{"location":"AnnikkenProducts/#andee-u","text":"Andee U connects to both iOS and Android devices.","title":"Andee U"},{"location":"AnnikkenProducts/#andee-android","text":"Andee Android connects to Android devices.","title":"Andee Android"},{"location":"AnnikkenProducts/#andee-ios","text":"Andee iOS connects to iOS Devices. Note: Out-of-Stock but will still get firmware updates","title":"Andee iOS"},{"location":"BeforeYouCode/","text":"Andee U/iOS/Android Shield Thank you for purchasing the Annikken Andee shield! Before you start coding your first project with Annikken Andee, here are the steps required for Annikken Andee to work. In order to use the Andee101 Library in your sketch , we require the following libraries: SPI.h Andee.h To include them in the project, insert the following code snippet at the top of your Arduino sketch. #include <SPI.h> #include <Andee.h> You will then need to add this code in the setup void setup() { Andee.begin(); // Setup communication between Annikken Andee and Arduino } to start communication between the Andee shield and Arduino board. The final sketch will look like the code below #include <SPI.h> #include <Andee.h> void setup() { Andee.begin(); // Setup communication between Annikken Andee and Arduino //put other setup code here if there are any } void loop() { // put your main code here, to run repeatedly: } Note: These steps are required for each project that you use with Annikken Andee. Leaving out these steps results in compile errors.","title":"Before You Code"},{"location":"BeforeYouCode/#andee-uiosandroid-shield","text":"Thank you for purchasing the Annikken Andee shield! Before you start coding your first project with Annikken Andee, here are the steps required for Annikken Andee to work. In order to use the Andee101 Library in your sketch , we require the following libraries: SPI.h Andee.h To include them in the project, insert the following code snippet at the top of your Arduino sketch. #include <SPI.h> #include <Andee.h> You will then need to add this code in the setup void setup() { Andee.begin(); // Setup communication between Annikken Andee and Arduino } to start communication between the Andee shield and Arduino board. The final sketch will look like the code below #include <SPI.h> #include <Andee.h> void setup() { Andee.begin(); // Setup communication between Annikken Andee and Arduino //put other setup code here if there are any } void loop() { // put your main code here, to run repeatedly: } Note: These steps are required for each project that you use with Annikken Andee. Leaving out these steps results in compile errors.","title":"Andee U/iOS/Android Shield"},{"location":"Examples/","text":"Examples This section provides examples for your Andee shield. You can jump to the example that best suits your needs. Creating Widgets To create a new widget, you will need to instantiate a new instance of the AndeeHelper class as follows. The ideal place to place this would be just below your #includes declaration in your Arduino sketch. AndeeHelper widget1; When creating a new widget, the most important properties that you need to set are: Unique ID Screen location Type Colors Display data Lets go through each of these properties. Unique ID To set the id: widget1.setId(0); widget2.setId(1); Note: The integer id for each widget should be unique and different. Declaring a widget as the same id as another will cause the latest widget to override the other. Screen Location You can set the location of your widget by one of two methods: A row and column based system. The mobile devices is divided into 4 rows and 4 columns. widget1.setLocation(1, 2, ONE_THIRD); For an in depth explanation on setLocation(), refer to this documentation Cartesian based system. This system is based on x and y coordinate with its origin at the top left corner, along with its height and width. widget1.setCoord(25, 25, 50, 25); For an in depth explanation on setCoord() refer to this documentation Type The Andee library provides a few different types of UI for example data displays, sliders or buttons. widget1.setType(DATA_OUT); For an in depth explanation on setType() and options for type, refer to this documentation Colors Every component of the widget can be customised by color. To set the color of the titles. widget1.setTitleTextColor(\"FFAEDE94\"); To set the background color for title region. widget1.setTitleColor(\"FFFFDAAA\"); To set body text color. widget1.setTextColor(\"FFFFDAAA\"); To set body background color. widget1.setColor(\"FF6D92A0\"); For an in depth explanation to set colours and predefined colors, refer to this documentation Display Data To display text or data. We use the following methods. widget1.setTitle(\"Sensor A103\"); widget1.setData(\"No readings received.\"); widget1.setUnits(\"cm\"); Now lets combine what we have shown into a single code snippet. void setup() { Andee.begin(); widget1.setId(0); widget1.setCoord(25, 25, 50, 25); widget1.setType(DATA_OUT); widget1.setTitleTextColor(\"FFAEDE94\"); widget1.setTitleColor(\"FFFFDAAA\"); widget1.setTextColor(\"FF9A73A9\"); widget1.setColor(\"FF6D92A0\"); widget1.setTitle(\"Sensor A103\"); widget1.setData(\"No readings received.\"); widget1.setUnits(\"cm\"); } Certain types of widgets require extra methods for setup. They will be discussed below. Creating Buttons Buttons have 2 modes. A single press mode which waits for a response from the Andee shield and a multipress mode that can be press continuously. The button defaults to single press when instantiated. To set the button as multi press mode. Use the following code. button.setInputMode(ACK); Creating Input Buttons Input buttons consists of the following: Keyboard Input Button Time Input Button Date Input Button Keyboard Input Button Keyboard input can activate different keyboard modes: KEYBOARD_IN , ALPHA_NUMERIC , ALPHA_NUMERIC_PW , NUMERIC , NUMERIC_PW . You can set the modes with the code below. keyboardWidget.setInputMode(KEYBOARD_IN); Time Input Button You can set a initial time to display for this widget. timeWidget.setDefaultTime(05,30,00); Date Input Button You can set a initial date to display for this widget. dateWidget.setDefaultDate(25, DEC, 2013); Creating Analog Dials Setting the colors for Analog Dials uses a different set methods compared to other widgets. To set the colours, use the code below. analogDial.setBaseColor(LIME_GREEN); analogDial.setActiveColor(GREEN); You also have to set the minimum and maximum value of the dial. analogDial.setMinMax(0, 100); Creating Sliders Sliders require a number of methods to get going. To set the slider's minimum and maximum values. slider.setSliderMinMax(0, 255, 0); To set the initial value. slider.moveSliderToValue(100); To set the incremental intervals for each increase in value. slider.setSliderNumIntervals(256); The slider have 2 modes in which it can operate: ON_VALUE_CHANGE AND ON_FINGER_UP . ON_VALUE_CHANGE means that the shield is updated immediately with new data when the slider is moved. ON_FINGER_UP means that the shield will only be updated when the finger is lifted up from the screen after dragging the slider. To set the mode. slider.setSliderReportMode(ON_VALUE_CHANGE); Setting the colors for sliders uses a different set methods compared to other widgets. To set the colours, use the code below. slider.setActiveColor(BLUE); slider.setBaseColor(DARK_BLUE); Updating The Widget Sending data to your mobile device requires setting new content for your widget and updating it. By setting new content, you can change text colors, background colors and text. For example, first you can change body color and data text. widget1.setData(\"New incoming data\"); widget1.setColor(\"FF6D92A0\"); Next, to update the widget. widget1.update(); Note : update() is a resource intensive process. It is recommend to only update a widget if it is needed Receiving Data Widgets such as button, slider, button inputs take inputs from your mobile devices. To process this inputs on your Arduino, we need to receive that data. Button You can check if button has been pressed by using isPressed() . if (button.isPressed()) { // turn on lights } You also can check the number of times the button has been pressed in a short duration if (button.isPressed() >= 2) { // turn on hall lights } else { // turn on kitchen lights } Slider To get the slider value int sliderIntValue = 0; sliderInt.getSliderValue(&sliderIntValue,INT); float sliderFltValue = 0; sliderFloat.getSliderValue(&sliderFltValue ,FLOAT); Keyboard Input Button First, we need to declare an array of characters to store data in memory. char userInput[32]; Next, we have to clear the memory from any data previously stored inside. memset(userInput, 0x00, 32); Finally, we will get the data and store it inside userInput. textInputButton.getKeyboardMessage(userInput); Time Input Button First, we need to declare an array of characters to store data in memory and variables to store integers. int hh, mm, ss; char tempStringTime[20]; Next, we will extract the hour, minute and seconds data into the int variables. timeInputButton.getTimeInput(&hh, &mm, &ss); Lastly, we can combine the data into a string as declared before. sprintf(tempString, \"%02d:%02d:%02d\", hh, mm, ss); Date Input Button First, we need to declare an array of characters to store data in memory and variables to store integers. int dd, mm, yyyy; char tempStringDate[20]; Next, we will extract the hour, minute and seconds data into the int variables. timeInputButton.getTimeInput(&dd, &mm, &yyyy); Lastly, we can combine the data into a string as declared before. sprintf(tempString, \"%02d/%02d/%02d\", dd, mm, yyyy); For full examples, you can refer to our built in examples in your Arduino IDE. Go to File -> Examples -> Andee for Andee U/iOS/Android","title":"Examples"},{"location":"Examples/#examples","text":"This section provides examples for your Andee shield. You can jump to the example that best suits your needs.","title":"Examples"},{"location":"Examples/#creating-widgets","text":"To create a new widget, you will need to instantiate a new instance of the AndeeHelper class as follows. The ideal place to place this would be just below your #includes declaration in your Arduino sketch. AndeeHelper widget1; When creating a new widget, the most important properties that you need to set are: Unique ID Screen location Type Colors Display data Lets go through each of these properties. Unique ID To set the id: widget1.setId(0); widget2.setId(1); Note: The integer id for each widget should be unique and different. Declaring a widget as the same id as another will cause the latest widget to override the other. Screen Location You can set the location of your widget by one of two methods: A row and column based system. The mobile devices is divided into 4 rows and 4 columns. widget1.setLocation(1, 2, ONE_THIRD); For an in depth explanation on setLocation(), refer to this documentation Cartesian based system. This system is based on x and y coordinate with its origin at the top left corner, along with its height and width. widget1.setCoord(25, 25, 50, 25); For an in depth explanation on setCoord() refer to this documentation Type The Andee library provides a few different types of UI for example data displays, sliders or buttons. widget1.setType(DATA_OUT); For an in depth explanation on setType() and options for type, refer to this documentation Colors Every component of the widget can be customised by color. To set the color of the titles. widget1.setTitleTextColor(\"FFAEDE94\"); To set the background color for title region. widget1.setTitleColor(\"FFFFDAAA\"); To set body text color. widget1.setTextColor(\"FFFFDAAA\"); To set body background color. widget1.setColor(\"FF6D92A0\"); For an in depth explanation to set colours and predefined colors, refer to this documentation Display Data To display text or data. We use the following methods. widget1.setTitle(\"Sensor A103\"); widget1.setData(\"No readings received.\"); widget1.setUnits(\"cm\"); Now lets combine what we have shown into a single code snippet. void setup() { Andee.begin(); widget1.setId(0); widget1.setCoord(25, 25, 50, 25); widget1.setType(DATA_OUT); widget1.setTitleTextColor(\"FFAEDE94\"); widget1.setTitleColor(\"FFFFDAAA\"); widget1.setTextColor(\"FF9A73A9\"); widget1.setColor(\"FF6D92A0\"); widget1.setTitle(\"Sensor A103\"); widget1.setData(\"No readings received.\"); widget1.setUnits(\"cm\"); } Certain types of widgets require extra methods for setup. They will be discussed below.","title":"Creating Widgets"},{"location":"Examples/#creating-buttons","text":"Buttons have 2 modes. A single press mode which waits for a response from the Andee shield and a multipress mode that can be press continuously. The button defaults to single press when instantiated. To set the button as multi press mode. Use the following code. button.setInputMode(ACK);","title":"Creating Buttons"},{"location":"Examples/#creating-input-buttons","text":"Input buttons consists of the following: Keyboard Input Button Time Input Button Date Input Button Keyboard Input Button Keyboard input can activate different keyboard modes: KEYBOARD_IN , ALPHA_NUMERIC , ALPHA_NUMERIC_PW , NUMERIC , NUMERIC_PW . You can set the modes with the code below. keyboardWidget.setInputMode(KEYBOARD_IN); Time Input Button You can set a initial time to display for this widget. timeWidget.setDefaultTime(05,30,00); Date Input Button You can set a initial date to display for this widget. dateWidget.setDefaultDate(25, DEC, 2013);","title":"Creating Input Buttons"},{"location":"Examples/#creating-analog-dials","text":"Setting the colors for Analog Dials uses a different set methods compared to other widgets. To set the colours, use the code below. analogDial.setBaseColor(LIME_GREEN); analogDial.setActiveColor(GREEN); You also have to set the minimum and maximum value of the dial. analogDial.setMinMax(0, 100);","title":"Creating Analog Dials"},{"location":"Examples/#creating-sliders","text":"Sliders require a number of methods to get going. To set the slider's minimum and maximum values. slider.setSliderMinMax(0, 255, 0); To set the initial value. slider.moveSliderToValue(100); To set the incremental intervals for each increase in value. slider.setSliderNumIntervals(256); The slider have 2 modes in which it can operate: ON_VALUE_CHANGE AND ON_FINGER_UP . ON_VALUE_CHANGE means that the shield is updated immediately with new data when the slider is moved. ON_FINGER_UP means that the shield will only be updated when the finger is lifted up from the screen after dragging the slider. To set the mode. slider.setSliderReportMode(ON_VALUE_CHANGE); Setting the colors for sliders uses a different set methods compared to other widgets. To set the colours, use the code below. slider.setActiveColor(BLUE); slider.setBaseColor(DARK_BLUE);","title":"Creating Sliders"},{"location":"Examples/#updating-the-widget","text":"Sending data to your mobile device requires setting new content for your widget and updating it. By setting new content, you can change text colors, background colors and text. For example, first you can change body color and data text. widget1.setData(\"New incoming data\"); widget1.setColor(\"FF6D92A0\"); Next, to update the widget. widget1.update(); Note : update() is a resource intensive process. It is recommend to only update a widget if it is needed","title":"Updating The Widget"},{"location":"Examples/#receiving-data","text":"Widgets such as button, slider, button inputs take inputs from your mobile devices. To process this inputs on your Arduino, we need to receive that data. Button You can check if button has been pressed by using isPressed() . if (button.isPressed()) { // turn on lights } You also can check the number of times the button has been pressed in a short duration if (button.isPressed() >= 2) { // turn on hall lights } else { // turn on kitchen lights } Slider To get the slider value int sliderIntValue = 0; sliderInt.getSliderValue(&sliderIntValue,INT); float sliderFltValue = 0; sliderFloat.getSliderValue(&sliderFltValue ,FLOAT); Keyboard Input Button First, we need to declare an array of characters to store data in memory. char userInput[32]; Next, we have to clear the memory from any data previously stored inside. memset(userInput, 0x00, 32); Finally, we will get the data and store it inside userInput. textInputButton.getKeyboardMessage(userInput); Time Input Button First, we need to declare an array of characters to store data in memory and variables to store integers. int hh, mm, ss; char tempStringTime[20]; Next, we will extract the hour, minute and seconds data into the int variables. timeInputButton.getTimeInput(&hh, &mm, &ss); Lastly, we can combine the data into a string as declared before. sprintf(tempString, \"%02d:%02d:%02d\", hh, mm, ss); Date Input Button First, we need to declare an array of characters to store data in memory and variables to store integers. int dd, mm, yyyy; char tempStringDate[20]; Next, we will extract the hour, minute and seconds data into the int variables. timeInputButton.getTimeInput(&dd, &mm, &yyyy); Lastly, we can combine the data into a string as declared before. sprintf(tempString, \"%02d/%02d/%02d\", dd, mm, yyyy); For full examples, you can refer to our built in examples in your Arduino IDE. Go to File -> Examples -> Andee for Andee U/iOS/Android","title":"Receiving Data"},{"location":"Introduction/","text":"Getting Started Let\u2019s start with some setup steps required to get you going with your first project. The objective of this section is ensure a smooth transition to Annikken Andee by getting you up and running as quickly as possible! If you come across any issues, please check our support page for your relevant product. If information is not available to your issue, feel free to contact us .","title":"Getting Started"},{"location":"Introduction/#getting-started","text":"Let\u2019s start with some setup steps required to get you going with your first project. The objective of this section is ensure a smooth transition to Annikken Andee by getting you up and running as quickly as possible! If you come across any issues, please check our support page for your relevant product. If information is not available to your issue, feel free to contact us .","title":"Getting Started"},{"location":"Troubleshoot/","text":"Troubleshooting Common Problems Seen on Andee Problem Solution Connection LED blinking or solid RED when phone is not connected to it Remove the USB cable from the Arduino and attach it again (Power cycle). Status LED blinking or solid Red Remove the USB cable from the Arduino and attach it again (Power cycle). Phone is connected to Andee but no UI on display Try these in order Check to make sure Andee is not paired to the phone. Power cycle the Arduino. Check and make sure yourwidgetname.update() is in your code. Check to make sure Andee app is updated. Check to make sure Andee firmware is the latest (v3.1.0). Your Andee Board is the Android board but does not look like the one shown on this site Please email us at andee@annikken.com Please email us if the problem you are having is not listed above or if you are unsure aboutusing the Andee board. Installing Andee Firmware Annikken regularly releases new firmware updates for the Andee U, iOS and Android. It is recommended that you update the firmware on your shield when a new update is released. To do so, you require the following items: 1x Micro SD Card. 1x Micro SD Card Reader/Writer (or a computer capable of reading/writing Micro SD Cards). 1x Arduino Board. 1x Annikken Andee U/iOS/Android shield. Andee U/Android This section provides instructions for firmware installation/upgrade for Annikken Andee U and Andee Android shields. Please follow the steps: Download the latest firmware for your Andee shield listed below if you have not done so. Andee U Andee Android Extract the zip file and copy \"image.hex\" into your Micro SD card. Connect the Annikken Andee to the Arduino and power it up. You should see an LED blinking. The Andee is in \"Normal Mode\". We will now need to put the Andee into \"Update Mode\". Press and hold down the \"BOOT\" and \"ANDEE RESET\" buttons together. Don\u2019t let go of them yet! While still holding down the \"BOOT\" button, release the \"ANDEE RESET\" button. You should see that \"CONN\" and \"STATUS\" LEDS are now flashing RED together. Now let go of the \"BOOT\" button. Insert the Micro SD card containing \"image.hex\" you loaded earlier into the Annikken Andee's SD card slot. Annikken Andee will automatically start updating. The LEDs will flash red and green consecutively. Do not power down the shield at this time. Once the update/installation has completed, the \"CONN\" and \"STATUS\" LEDs will start to blink green again. You're done! Your Annikken Andee Shield is now updated with the latest firmware! Andee iOS This section provides instructions for firmware installation/upgrade for Annikken Andee iOS shields. Please follow the steps: Download the latest firmware for Andee iOS here if you have not done so. Extract the zip file and copy \"image.hex\" into your Micro SD card. Connect the Annikken Andee to the Arduino and power it up. You should see an LED blinking. The Andee is in \"Normal Mode\". We will now need to put the Andee into \"Update Mode\". Press and hold down the \"BTN_0\" and \"BTN_1\" buttons together. Don\u2019t let go of them yet! While still holding down the \"BTN_1\" button, release the \"BTN_0\" button. You should see that \"CONN\" and \"STATUS\" LEDS are now flashing RED together. Now let go of the \"BTN_1\" button. Insert Micro SD card containing \"image.hex\" you loaded earlier into the Annikken Andee's SD card slot. Annikken Andee will automatically start updating. The LEDs will flash red and green consecutively. Do not power down the shield at this time. Once the update/installation has completed, the \"CONN\" and \"STATUS\" LEDs will start to blink green again. You're done! Your Annikken Andee iOS shield is now updated with the latest firmware!","title":"Troubleshooting"},{"location":"Troubleshoot/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"Troubleshoot/#common-problems-seen-on-andee","text":"Problem Solution Connection LED blinking or solid RED when phone is not connected to it Remove the USB cable from the Arduino and attach it again (Power cycle). Status LED blinking or solid Red Remove the USB cable from the Arduino and attach it again (Power cycle). Phone is connected to Andee but no UI on display Try these in order Check to make sure Andee is not paired to the phone. Power cycle the Arduino. Check and make sure yourwidgetname.update() is in your code. Check to make sure Andee app is updated. Check to make sure Andee firmware is the latest (v3.1.0). Your Andee Board is the Android board but does not look like the one shown on this site Please email us at andee@annikken.com Please email us if the problem you are having is not listed above or if you are unsure aboutusing the Andee board.","title":"Common Problems Seen on Andee"},{"location":"Troubleshoot/#installing-andee-firmware","text":"Annikken regularly releases new firmware updates for the Andee U, iOS and Android. It is recommended that you update the firmware on your shield when a new update is released. To do so, you require the following items: 1x Micro SD Card. 1x Micro SD Card Reader/Writer (or a computer capable of reading/writing Micro SD Cards). 1x Arduino Board. 1x Annikken Andee U/iOS/Android shield.","title":"Installing Andee Firmware"},{"location":"Troubleshoot/#andee-uandroid","text":"This section provides instructions for firmware installation/upgrade for Annikken Andee U and Andee Android shields. Please follow the steps: Download the latest firmware for your Andee shield listed below if you have not done so. Andee U Andee Android Extract the zip file and copy \"image.hex\" into your Micro SD card. Connect the Annikken Andee to the Arduino and power it up. You should see an LED blinking. The Andee is in \"Normal Mode\". We will now need to put the Andee into \"Update Mode\". Press and hold down the \"BOOT\" and \"ANDEE RESET\" buttons together. Don\u2019t let go of them yet! While still holding down the \"BOOT\" button, release the \"ANDEE RESET\" button. You should see that \"CONN\" and \"STATUS\" LEDS are now flashing RED together. Now let go of the \"BOOT\" button. Insert the Micro SD card containing \"image.hex\" you loaded earlier into the Annikken Andee's SD card slot. Annikken Andee will automatically start updating. The LEDs will flash red and green consecutively. Do not power down the shield at this time. Once the update/installation has completed, the \"CONN\" and \"STATUS\" LEDs will start to blink green again. You're done! Your Annikken Andee Shield is now updated with the latest firmware!","title":"Andee U/Android"},{"location":"Troubleshoot/#andee-ios","text":"This section provides instructions for firmware installation/upgrade for Annikken Andee iOS shields. Please follow the steps: Download the latest firmware for Andee iOS here if you have not done so. Extract the zip file and copy \"image.hex\" into your Micro SD card. Connect the Annikken Andee to the Arduino and power it up. You should see an LED blinking. The Andee is in \"Normal Mode\". We will now need to put the Andee into \"Update Mode\". Press and hold down the \"BTN_0\" and \"BTN_1\" buttons together. Don\u2019t let go of them yet! While still holding down the \"BTN_1\" button, release the \"BTN_0\" button. You should see that \"CONN\" and \"STATUS\" LEDS are now flashing RED together. Now let go of the \"BTN_1\" button. Insert Micro SD card containing \"image.hex\" you loaded earlier into the Annikken Andee's SD card slot. Annikken Andee will automatically start updating. The LEDs will flash red and green consecutively. Do not power down the shield at this time. Once the update/installation has completed, the \"CONN\" and \"STATUS\" LEDs will start to blink green again. You're done! Your Annikken Andee iOS shield is now updated with the latest firmware!","title":"Andee iOS"}]}